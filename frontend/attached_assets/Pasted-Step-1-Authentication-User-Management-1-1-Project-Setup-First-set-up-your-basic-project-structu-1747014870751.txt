Step 1: Authentication & User Management
1.1: Project Setup
First, set up your basic project structure:

Create a new project with the following files:

index.html (main entry point)
css/styles.css (for custom styles)
js/api.js (for API interactions)
js/auth.js (for authentication logic)
js/app.js (main application logic)


In index.html, add:

Basic HTML structure
TailwindCSS via CDN: <script src="https://cdn.tailwindcss.com"></script>
FontAwesome for icons (optional)
Links to your JS and CSS files
Main containers for your app:

A navigation bar
A main content area with id="app-container"
A footer




Create a minimal CSS setup in styles.css with any custom styles you might need.

1.2: API Service Setup
In js/api.js, create a simple API service:

Define the base URL constant: const API_BASE_URL = 'https://81cd-2405-6e00-491-99fb-4096-556-1786-b75c.ngrok-free.app';
Create a request function that:

Takes endpoint, method, and optional data parameters
Constructs the full URL
Sets up headers (Content-Type: application/json)
Adds Authorization header with token if available in localStorage
Uses fetch to make the request
Handles and logs errors appropriately
Returns the parsed response data


For improved debugging, log all outgoing requests and incoming responses.

1.3: Login Implementation
Create a login form and functionality:

In index.html, add a login form container in your main content area:

Username input field
Password input field
Login button
Link to registration page
Error message container (hidden by default)


In js/auth.js, create a login function that:

Gets username and password values from the form
Uses your API service to call POST /user/login with:
javascript{
  "username": "username-value",
  "password": "password-value"
}

On success:

Stores the returned token in localStorage: localStorage.setItem('token', response.access_token)
Stores the user ID: localStorage.setItem('user_id', response.user_id)
Navigates to the dashboard


On failure:

Displays the error message in the error container
Logs detailed error for debugging




Add form submission handling in js/app.js that:

Prevents default form submission
Calls your login function
Disables the login button during API call
Re-enables the button after call completes



1.4: Registration Implementation
Create a registration form and functionality:

In a separate register.html file or in a hidden container in index.html, create a registration form:

Username input field
Email input field
Password input field
Domain preference section with radio buttons:

Entertainment (Movies)
E-commerce (Products)


Register button
Link back to login page
Error message container (hidden by default)


In js/auth.js, create a register function that:

Gets all form field values
Constructs the domain_preferences object based on selection:
javascript// If Entertainment is selected:
domain_preferences: {
  entertainment: ["movielens"],
  ecommerce: []
}

// If E-commerce is selected:
domain_preferences: {
  entertainment: [],
  ecommerce: ["amazon"]
}

Uses your API service to call POST /user/create with:
javascript{
  "username": "username-value",
  "email": "email-value",
  "password": "password-value",
  "domain_preferences": domain_preferences_object
}

On success:

Shows a success message
Provides a button to navigate to login


On failure:

Displays the error message
Logs detailed error for debugging




IMPORTANT DEBUGGING TIP: Log the exact request payload before sending to ensure it matches the expected format exactly. The backend is strict about the format and will return a 400 error if anything is wrong.

1.5: User Profile Retrieval
Create a function to get the current user's profile:

In js/auth.js, add a function to fetch the user profile:

Uses your API service to call GET /user/me with the authorization header
Requires the token to be in localStorage
On success:

Stores user data for use in the app
Returns the user object


On failure:

If 401 unauthorized, redirects to login
Logs error details




Add a function to check if the user is authenticated:

Checks if token exists in localStorage
Optionally verifies token has not expired (if your tokens include expiration)


Add a logout function that:

Removes token from localStorage
Redirects to login page